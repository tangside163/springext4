<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<context:component-scan base-package="com.tangsi">
	</context:component-scan>

	<!-- 引入配置文件 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config/jdbc.properties</value>
			</list>
		</property>
	</bean>

	<!-- c3p0连接池 -->
	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" 
		destroy-method="close"> <property name="driverClass" value="${jdbc.driverClassName}"> 
		</property> <property name="jdbcUrl" value="${jdbc.url}"> </property> <property 
		name="user" value="${jdbc.username}"> </property> <property name="password" 
		value="${jdbc.password}"> </property> 连接池中保留的最小连接数。 <property name="minPoolSize" 
		value="10" /> 连接池中保留的最大连接数。Default: 15 <property name="maxPoolSize" value="100" 
		/> 最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 <property name="maxIdleTime" 
		value="1800" /> 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 <property name="acquireIncrement" 
		value="3" /> <property name="maxStatements" value="1000" /> <property name="initialPoolSize" 
		value="10" /> 每60秒检查所有连接池中的空闲连接。Default: 0 <property name="idleConnectionTestPeriod" 
		value="60" /> 定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 <property name="acquireRetryAttempts" 
		value="30" /> <property name="breakAfterAcquireFailure" value="true" /> <property 
		name="testConnectionOnCheckout" value="false" /> </bean> -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}">
		</property>
		<property name="url" value="${jdbc.url}">
		</property>
		<property name="username" value="${jdbc.username}">
		</property>
		<property name="password" value="${jdbc.password}">
		</property>
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.tangsi.user.pojo"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.jdbc.batch_size">20</prop>
				<prop key="current_session_context_class">thread</prop>
				<!-- <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop> -->
			</props>
		</property>
	</bean>

	<bean id="txManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!-- 基于AOP的声明式事务 -->
	<aop:config expose-proxy="true" proxy-target-class="true">
		<aop:pointcut id="aopPointcut"
			expression="execution(* com.tangsi.user.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="aopPointcut" />
	</aop:config>
	
  <!-- 工作流activiti配置 -->
 <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">  
    <property name="dataSource" ref="dataSource" />  
    <property name="transactionManager" ref="txManager" />  
    <property name="databaseSchemaUpdate" value="true" />  
    <property name="mailServerHost" value="localhost" />  
    <property name="mailServerPort" value="5025" />  
    <property name="jpaCloseEntityManager" value="true" />  
    <property name="jobExecutorActivate" value="false" /> 
    <property name="activityFontName" value="宋体"></property>
    <property name="labelFontName" value="宋体"></property> 
  </bean>  
    
  <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">  
    <property name="processEngineConfiguration" ref="processEngineConfiguration" />  
  </bean>  
    
  <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />  
  <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />  
  <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />  
  <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />  
  <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" /> 
  <!-- 工作流activiti配置 -->	
  
  <!-- 定时任务quartz配置 -->
  <!-- quartz-2.x的配置 -->
  <!-- 使用MethodInvokingJobDetailFactoryBean，任务类可以不实现Job接口，通过targetMethod指定调用方法,更加灵活-->
	<bean id="taskJob" class="com.tangsi.user.schedule.task.MyFirstSchedulerTask"/>
	<bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	    <property name="group" value="job_work"/>
	    <property name="name" value="job_work_name"/>
	    <!--false表示等上一个任务执行完后再开启新的任务-->
	    <property name="concurrent" value="false"/>
	    <property name="targetObject">
	        <ref bean="taskJob"/><!-- 执行任务的目标对象 -->
	    </property>
	    <property name="targetMethod">
	        <value>run</value>    <!-- 执行任务的目标方法 -->
	    </property>
	</bean>
  
  	<!--  调度触发器 -->
	<bean id="myTrigger"
	      class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="name" value="work_default_name"/>
	    <property name="group" value="work_default"/>
	    <property name="jobDetail">
	        <ref bean="jobDetail" />
	    </property>
	    <property name="cronExpression">
	        <value>0 0/5 12 * * ? *</value><!-- "0 0/5 12 * * ? *" 每天12点到12:55每隔五分钟触发 -->
	    </property>
	    
	    <!-- cron表达式 -->
	    <!-- 
			           字段 允许值 允许的特殊字符
				秒 0-59 , – * /
				分 0-59 , – * /
				小时 0-23 , – * /
				日期 1-31 , – * ? / L W C
				月份 1-12 或者 JAN-DEC , – * /
				星期 1-7 或者 SUN-SAT , – * ? / L C #
				年（可选） 留空, 1970-2099 , – * /
				表达式意义
				"0 0 12 * * ?" 每天中午12点触发
				"0 15 10 ? * *" 每天上午10:15触发
				"0 15 10 * * ?" 每天上午10:15触发
				"0 15 10 * * ? *" 每天上午10:15触发
				"0 15 10 * * ? 2005" 2005年的每天上午10:15触发
				"0 * 14 * * ?" 在每天下午2点到下午2:59期间的每1分钟触发
				"0 0/5 14 * * ?" 在每天下午2点到下午2:55期间的每5分钟触发
				"0 0/5 14,18 * * ?" 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发
				"0 0-5 14 * * ?" 在每天下午2点到下午2:05期间的每1分钟触发
				"0 10,44 14 ? 3 WED" 每年三月的星期三的下午2:10和2:44触发
				"0 15 10 ? * MON-FRI" 周一至周五的上午10:15触发
				"0 15 10 15 * ?" 每月15日上午10:15触发
				"0 15 10 L * ?" 每月最后一日的上午10:15触发
				"0 15 10 ? * 6L" 每月的最后一个星期五上午10:15触发
				"0 15 10 ? * 6L 2002-2005" 2002年至2005年的每月的最后一个星期五上午10:15触发
				"0 15 10 ? * 6#3" 每月的第三个星期五上午10:15触发
				每天早上6点
				0 6 * * *
				每两个小时
				0 */2 * * *
				晚上11点到早上8点之间每两个小时，早上八点
				0 23-7/2，8 * * *
				每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点
				0 11 4 * 1-3
				1月1日早上4点
				0 4 1 1 *
	     -->
	</bean>
	 
	<!-- 调度工厂 -->
	<bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	    <property name="triggers">
	        <list>
	            <ref bean="myTrigger"/>
	        </list>
	    </property>
	</bean>
  <!-- 定时任务quartz配置 -->
  
  
  	<!--<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroDbRealm" />
	</bean>-->

</beans>
